//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/InputManager.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputManager : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputManager()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputManager"",
    ""maps"": [
        {
            ""name"": ""InputMaster"",
            ""id"": ""01beb338-f8e2-4141-a72e-41ffafda1371"",
            ""actions"": [
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""d5321a14-d231-4e2b-a770-f1f1f13a4973"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Time"",
                    ""type"": ""Button"",
                    ""id"": ""51b29fda-9dc5-4d66-9996-68b6b2597453"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ShootMode"",
                    ""type"": ""Button"",
                    ""id"": ""b330b50b-4e7f-4821-8132-6cd3a7352aa7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Repel"",
                    ""type"": ""Button"",
                    ""id"": ""efa05657-2063-4519-9d38-9c2109676f5c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attract"",
                    ""type"": ""Button"",
                    ""id"": ""3a07c52a-ef11-42e4-ad9e-cfeb3489ed90"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""3c61e705-555e-46a2-9b78-2e370b7b8e5d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""ec2bfb56-757a-4a98-a620-83af35d0ad94"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Selector"",
                    ""type"": ""Value"",
                    ""id"": ""a68dcb26-cb3f-4fa6-899f-325b7fa98974"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2a66bb39-3e45-46bf-bc38-0a12d2d792a6"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Time"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b8f7ee24-f11e-4130-af3f-4ce584fe6a60"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Time"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2e8353b5-4eb0-46af-bb72-d77c536dc973"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""ShootMode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6e4e524b-b0c3-495e-abcc-31248396c8de"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""ShootMode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""08820fce-e682-4f39-812e-19c3aefd7ad3"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Repel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""08eed9a3-f2ca-42ee-94db-cd8a0de64bf3"",
                    ""path"": ""<Keyboard>/numpad0"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Repel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3563f459-2c83-4420-97f9-0a70e199e250"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Attract"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d6fe7d80-16f2-4162-85ed-37452c026ab3"",
                    ""path"": ""<Keyboard>/rightCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Attract"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9c075c41-c6c6-47f8-a927-5b56894aa1d0"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""902b6307-5fa4-44b2-8dc1-63055d0ce7d2"",
                    ""path"": ""<Keyboard>/o"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""XAxis"",
                    ""id"": ""6b40434d-714a-48f1-b6c7-743a20f94cd5"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""73d9e519-e4ef-4b1f-9394-b7c0531de552"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""b2ab8b7d-476d-4773-b143-2405a4208cd4"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""8a9bb7b5-767b-4348-914a-b0cade4b0498"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""670add62-26b9-4043-87d1-f1a1532a5f8b"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""a69a656b-5512-45bb-9d26-70fb49e0a095"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""1fd781e6-fc2e-40b7-a88a-151ade2eada8"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""917a2d4f-72c3-4c98-956d-548ec63fd6a2"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Cross"",
                    ""id"": ""e95f5bfc-9cd1-4420-b3a8-9fb9644f67b1"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Selector"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""9517e86c-8072-494b-95f5-ff9173083965"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Selector"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""599c5865-cfd3-4b5b-8239-64216725af11"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Selector"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""8b6c0abe-2c0c-47a4-8aff-a345a42a1432"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Selector"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""caf6f9c3-6dc9-4e15-829c-d8a53a59e997"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Selector"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""320af1c9-2f82-4800-a94e-54bc7c5535f0"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Selector"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""235a11ee-4163-44dc-b594-119a494a0a7e"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b52c481a-a3df-440f-9ffd-75e184e536d7"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<XInputController>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // InputMaster
        m_InputMaster = asset.FindActionMap("InputMaster", throwIfNotFound: true);
        m_InputMaster_Jump = m_InputMaster.FindAction("Jump", throwIfNotFound: true);
        m_InputMaster_Time = m_InputMaster.FindAction("Time", throwIfNotFound: true);
        m_InputMaster_ShootMode = m_InputMaster.FindAction("ShootMode", throwIfNotFound: true);
        m_InputMaster_Repel = m_InputMaster.FindAction("Repel", throwIfNotFound: true);
        m_InputMaster_Attract = m_InputMaster.FindAction("Attract", throwIfNotFound: true);
        m_InputMaster_Shoot = m_InputMaster.FindAction("Shoot", throwIfNotFound: true);
        m_InputMaster_Move = m_InputMaster.FindAction("Move", throwIfNotFound: true);
        m_InputMaster_Selector = m_InputMaster.FindAction("Selector", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // InputMaster
    private readonly InputActionMap m_InputMaster;
    private IInputMasterActions m_InputMasterActionsCallbackInterface;
    private readonly InputAction m_InputMaster_Jump;
    private readonly InputAction m_InputMaster_Time;
    private readonly InputAction m_InputMaster_ShootMode;
    private readonly InputAction m_InputMaster_Repel;
    private readonly InputAction m_InputMaster_Attract;
    private readonly InputAction m_InputMaster_Shoot;
    private readonly InputAction m_InputMaster_Move;
    private readonly InputAction m_InputMaster_Selector;
    public struct InputMasterActions
    {
        private @InputManager m_Wrapper;
        public InputMasterActions(@InputManager wrapper) { m_Wrapper = wrapper; }
        public InputAction @Jump => m_Wrapper.m_InputMaster_Jump;
        public InputAction @Time => m_Wrapper.m_InputMaster_Time;
        public InputAction @ShootMode => m_Wrapper.m_InputMaster_ShootMode;
        public InputAction @Repel => m_Wrapper.m_InputMaster_Repel;
        public InputAction @Attract => m_Wrapper.m_InputMaster_Attract;
        public InputAction @Shoot => m_Wrapper.m_InputMaster_Shoot;
        public InputAction @Move => m_Wrapper.m_InputMaster_Move;
        public InputAction @Selector => m_Wrapper.m_InputMaster_Selector;
        public InputActionMap Get() { return m_Wrapper.m_InputMaster; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InputMasterActions set) { return set.Get(); }
        public void SetCallbacks(IInputMasterActions instance)
        {
            if (m_Wrapper.m_InputMasterActionsCallbackInterface != null)
            {
                @Jump.started -= m_Wrapper.m_InputMasterActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_InputMasterActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_InputMasterActionsCallbackInterface.OnJump;
                @Time.started -= m_Wrapper.m_InputMasterActionsCallbackInterface.OnTime;
                @Time.performed -= m_Wrapper.m_InputMasterActionsCallbackInterface.OnTime;
                @Time.canceled -= m_Wrapper.m_InputMasterActionsCallbackInterface.OnTime;
                @ShootMode.started -= m_Wrapper.m_InputMasterActionsCallbackInterface.OnShootMode;
                @ShootMode.performed -= m_Wrapper.m_InputMasterActionsCallbackInterface.OnShootMode;
                @ShootMode.canceled -= m_Wrapper.m_InputMasterActionsCallbackInterface.OnShootMode;
                @Repel.started -= m_Wrapper.m_InputMasterActionsCallbackInterface.OnRepel;
                @Repel.performed -= m_Wrapper.m_InputMasterActionsCallbackInterface.OnRepel;
                @Repel.canceled -= m_Wrapper.m_InputMasterActionsCallbackInterface.OnRepel;
                @Attract.started -= m_Wrapper.m_InputMasterActionsCallbackInterface.OnAttract;
                @Attract.performed -= m_Wrapper.m_InputMasterActionsCallbackInterface.OnAttract;
                @Attract.canceled -= m_Wrapper.m_InputMasterActionsCallbackInterface.OnAttract;
                @Shoot.started -= m_Wrapper.m_InputMasterActionsCallbackInterface.OnShoot;
                @Shoot.performed -= m_Wrapper.m_InputMasterActionsCallbackInterface.OnShoot;
                @Shoot.canceled -= m_Wrapper.m_InputMasterActionsCallbackInterface.OnShoot;
                @Move.started -= m_Wrapper.m_InputMasterActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_InputMasterActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_InputMasterActionsCallbackInterface.OnMove;
                @Selector.started -= m_Wrapper.m_InputMasterActionsCallbackInterface.OnSelector;
                @Selector.performed -= m_Wrapper.m_InputMasterActionsCallbackInterface.OnSelector;
                @Selector.canceled -= m_Wrapper.m_InputMasterActionsCallbackInterface.OnSelector;
            }
            m_Wrapper.m_InputMasterActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Time.started += instance.OnTime;
                @Time.performed += instance.OnTime;
                @Time.canceled += instance.OnTime;
                @ShootMode.started += instance.OnShootMode;
                @ShootMode.performed += instance.OnShootMode;
                @ShootMode.canceled += instance.OnShootMode;
                @Repel.started += instance.OnRepel;
                @Repel.performed += instance.OnRepel;
                @Repel.canceled += instance.OnRepel;
                @Attract.started += instance.OnAttract;
                @Attract.performed += instance.OnAttract;
                @Attract.canceled += instance.OnAttract;
                @Shoot.started += instance.OnShoot;
                @Shoot.performed += instance.OnShoot;
                @Shoot.canceled += instance.OnShoot;
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Selector.started += instance.OnSelector;
                @Selector.performed += instance.OnSelector;
                @Selector.canceled += instance.OnSelector;
            }
        }
    }
    public InputMasterActions @InputMaster => new InputMasterActions(this);
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    public interface IInputMasterActions
    {
        void OnJump(InputAction.CallbackContext context);
        void OnTime(InputAction.CallbackContext context);
        void OnShootMode(InputAction.CallbackContext context);
        void OnRepel(InputAction.CallbackContext context);
        void OnAttract(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
        void OnSelector(InputAction.CallbackContext context);
    }
}
